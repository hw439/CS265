Q1: 
./lab02/lab2

Q2: find . -name *.bash

Q3: 
./lab01/hello.bash
./lab02/check.bash
./lab02/eg.bash
./lab02/getopts.bash
./lab02/loop_subshell.bash
./lab02/out.bash
./lab02/rv.bash
./lab02/args.bash
./lab02/func.bash
./lab02/isatty.bash
./lab02/hello.bash
./tmp/gotMe.bash

Q4:
97  499 2960 breadIsDangerous.txt

Q5:
grep "the" breadIsDangerous.txt | wc -l

You would get 8 results

Q6: 
A new file called spellExample.bak shows up

Q7:
1c1
< I went to a gadren party
--- #### 1c1 SAYS "REPLACE LINE 1 OF THE spellExample FILE WITH LINE 1 IN THE "spellExample.bak" FILE
> I went to a garden party
3c3
< bnuch of my old freinds did somehting
--- #### 1c1 SAYS "REPLACE LINE 3 OF THE spellExample FILE WITH LINE 3 IN THE "spellExample.bak" FILE
> bunch of my old friends did somehting
6d5
< An extra line
#### 6d5 SAYS "DELETE LINE 6 OF THE spellExample FILE BECAUSE IT DOESN'T MATCH WITH THE "spellExample.bak" FILE

Q8:
Nothing since you are comparing the same file. There are no differences between them.

Q9:
du * | sort -n -r | head -n 8

Q10:
1: This command will find all the lines that have the word "dough" in the text file breadIsDangerous.txt
2: This command will return an error code from the last run process. The result I got was 0 which means no error occured.
3: Nothing was printed
4: A 1 appeared which means there is an error with the command. The error was: no command found
5: There is no such file so grep cannot find the word dough in a non-existent file
6: A 2 appeared which means there is an error. The error: command not found

Q11:
1: I used the git command "git checkout" to go back to the commit that wasn't deleted. I had to use "git log --oneline" to find the git commit version number before I could run a "git checkout <gitcommitversionnum_args> -- lab2". I didn't want to go to the HEAD so I only choose the lab2 file to come back which sent it back to master then did a commit
2: If you use git log --oneline, you can view the git commit history
